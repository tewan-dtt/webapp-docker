pipeline{
	agent any
	environment{
		dockerImage = ''	
	}
	tools{
		maven 'Maven'
	}
	stages {
		stage ('Initialize'){
			steps {
        			sh '''
                    			echo "PATH = ${PATH}"
                    			echo "M2_HOME = ${M2_HOME}"
            			''' 
				slackSend channel: "#deloitte-devsecops-poc", message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Jenkins Pipeline Started - (<${env.BUILD_URL}|Open>)"
      			}
		}
		
    	stage ('Building') {
      			steps {
      				sh 'mvn clean package'
       			}
    	}
		
		stage ('Container Image Baking and Upload'){
			environment {registryCredential = 'docker-hub'}
			steps{
				script{
					dockerImage = docker.build("wanhyterr/webapp")
					docker.withRegistry( '', registryCredential ) {
						dockerImage.push("$BUILD_NUMBER")
						dockerImage.push('latest')
					}
				}
			}
		}

		stage ('Deploy in Staging'){
			steps{
				sh 'docker ps -f name=webapp -q | xargs --no-run-if-empty docker container stop'
				sh 'docker container ls -a -fname=webapp -q | xargs -r docker container rm'
				script{
					dockerImage.run("-p 8888:8080 --rm --name webapp")
				}
				slackSend channel: "#deloitte-devsecops-poc", message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Deployed to Staging - (<http://10.59.0.209:8888/webapp|Open>)"
			}
		}

		stage('Security Analysis'){
			parallel{
				stage ('Secret Check') {
      				steps {
	        			sh 'rm trufflehog-result.yaml || true'
					sh 'rm trufflehog-report.html || true'
	        			sh 'docker run trufflehog3 -f yaml https://github.com/tewan-dtt/webapp-docker.git > trufflehog-result.yaml || true'
					sh 'docker run -v `pwd`/trufflehog-result.yaml:/trufflehog3/truffle-result.yaml trufflehog3 -R /trufflehog3/truffle-result.yaml > trufflehog-report.html || true'
	        			sh 'cat trufflehog-result.yaml'
      				}
    			}
		
				stage('Fortify Remote Analysis (SAST)') {
		      			steps {
		        			fortifyRemoteArguments transOptions: '-Xmx2G'
						fortifyRemoteAnalysis remoteAnalysisProjectType: fortifyMaven(), uploadSSC: [appName: 'Webapp-Demo-Fortify', appVersion: '1']
		      			}
		    	}

				stage('Prisma Cloud Scan (Container Vuln Scan)') {
				        steps {
							// Scan the image
							prismaCloudScanImage ca: '',
							cert: '',
							dockerAddress: 'unix:///var/run/docker.sock',
							image: 'wanhyterr/webapp*',
							key: '',
							logLevel: 'info',
							podmanPath: '',
							project: '',
							resultsFile: 'prisma-cloud-scan-results.json',
							ignoreImageBuildTime:true
				        }
				}

				stage ('Fortify WebInspect (DAST)'){
					steps {
						sh 'pwsh /opt/webinspect_script/webinspect-webapps.ps1&'
					}
				}

			}
		}

		stage ('Archive Artifact'){
			steps{
				archiveArtifacts 'target/*.war'
				archiveArtifacts 'trufflehog-result.yaml'
				archiveArtifacts 'trufflehog-report.html'
				archiveArtifacts '*.fpr'
				archiveArtifacts 'prisma-cloud-scan-results.json'
				publishHTML (target: [
				      allowMissing: false,
				      alwaysLinkToLastBuild: false,
				      keepAll: true,
				      reportDir: '',
				      reportFiles: 'trufflehog-report.html',
				      reportName: "Trufflehog Report"
				    ])
			}
		}
		
		stage ('Approve to Release'){
			steps{
				slackSend channel: "#deloitte-devsecops-poc", message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Ready to proceed in Production - (<http://10.59.0.209:8080/blue/organizations/jenkins/${env.JOB_NAME}/detail/${env.JOB_NAME}/${env.BUILD_NUMBER}/pipeline|Open>). Please kindly review the security testing result then approve in Jenkins."
				input "Are you sure to deploy the new release into production? Please ensure the new release does not contain any severe vulnerabilities."
			}
		}
		
		stage ('Deploy in Production'){
			steps{
				sshagent(['tomcat']){
					sh '''
						ssh -t ec2-user@tomcat 'docker ps -f name=webapp -q | xargs --no-run-if-empty docker container stop'
						ssh -t ec2-user@tomcat 'docker container ls -a -fname=webapp -q | xargs -r docker container rm'
						ssh -t ec2-user@tomcat 'docker images wanhyterr/webapp -q | xargs -r docker image rm -f'
						ssh -t ec2-user@tomcat 'docker run -d -p 8888:8080 --rm --name webapp wanhyterr/webapp'
					'''
				}
			}
		}
		
		post {
			/*
			 * These steps will run at the end of the pipeline based on the condition.
			 * Post conditions run in order regardless of their place in pipeline
			 * 1. always - always run
			 * 2. changed - run if something changed from last run
			 * 3. aborted, success, unstable or failure - depending on status
			 */
			always {
			    slackSend channel: "#deloitte-devsecops-poc", message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - ${currentBuild.currentResult} - (<${env.BUILD_URL}|Open>)."
			}
			aborted {
			    //slackSend channel: "#deloitte-devsecops-poc", message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Aborted - (<${env.BUILD_URL}|Open>)."
			}
			success {
			    slackSend channel: "#deloitte-devsecops-poc", message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - Deployed in Production - (<http://10.59.0.190:8888/webapp|Open>)."
			}
    		}
	}
}
